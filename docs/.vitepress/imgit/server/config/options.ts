import { CapturedAsset, ResolvedAsset, FetchedAsset, ProbedAsset, EncodedAsset, BuiltAsset } from "../asset";
import { Encoder, EncodeSpec } from "../encoder";
import { Cache } from "../cache";

/** Configures server behaviour. */
export type Options = {
    /** Local directory under which project's static files are stored. Required to resolve
     *  file paths of relative content sources; <code>./public</code> by default. */
    root: string;
    /** Regular expressions to use for capturing transformed assets syntax.
     *  Expects <code><url></code>, <code><alt></code> and <code><spec></code> capture groups
     *  (alt and spec are optional). By default, captures Markdown image syntax with spec defined as
     *  query params after alt: <code>!\[(?<alt>.*?)(?<spec>\?\S+?)?]\((?<url>\S+?)\)</code> */
    regex: RegExp[];
    /** Custom asset resolvers executed in order before the built-in resolver. Use to override the way
     *  asset info is resolved from captured syntax or add support for custom asset types and/or syntax. */
    resolvers: AssetResolver[];
    /** Custom asset HTML builders executed in order before the built-in builder. Use to override HTML
     *  generated by the server or add support for custom asset types. */
    builders: AssetBuilder[];
    /** Custom asset servers executed in order before the built-in server. Use to prepare generated files
     *  to be served (eg, copy to the static assets dir or upload to a CDN) and resolve the served URL. */
    servers: AssetServer[];
    /** Image source to use for posters. When poster generation enabled in encode options (default),
     *  will use specified source as a fallback for legacy browsers, otherwise will use the
     *  source for all posters. Empty base64-encoded image is used by default for compatibility;
     *  assign <code>null</code> to disable posters completely. */
    poster: string | null;
    /** Default width threshold for the transformed assets, in pixels. When source asset is larger,
     *  will downscale it while preserving the original aspect. In case the source is 2x or larger,
     *  images and animations will as well get additional variant for high-density displays.
     *  This option is ignored when asset has width explicitly assigned via spec syntax. */
    width: number | null;
    /** Configure logging behaviour; assign <code>null</code> to disable logging. */
    log: LogOptions | null;
    /** Configure caching behaviour; assign <code>null</code> to disable caching. */
    cache: CacheOptions | null;
    /** Configure remote content fetching. */
    fetch: FetchOptions;
    /** Configure content encoding. */
    encode: EncodeOptions;
    /** Configure document transformation process. */
    transform: TransformOptions;
};

/** User-defined asset resolver. Given captured asset syntax, return asset type,
 *  content locations and specs. Return null when the resolver can't or shouldn't
 *  handle the asset, in which case it'll be handled by next resolvers in the chain. */
export type AssetResolver = (asset: CapturedAsset) => Promise<ResolvedAsset | null>;

/** User-defined asset HTML builder. Given encoded asset(s), return HTML to replace captured syntax
 *  in the transformed document. May include additional merged assets when associated syntax were
 *  joined via "merge" spec. Return null when the builder can't or shouldn't  handle the asset,
 *  in which case it'll be handled by next builders in the chain. */
export type AssetBuilder = (asset: EncodedAsset, merges?: EncodedAsset[]) => Promise<string | null>;

/** User-defined asset server. Given full path to a content file and associated asset info,
 *  return URL under which the file will be served and prepare the file to be served (eg, copy to
 *  the static assets dir or upload to a CDN). Return null when the server can't or shouldn't
 *  handle the asset, in which case it'll be handled by next servers in the chain. */
export type AssetServer = (path: string, asset: EncodedAsset) => Promise<string | null>;

/** Configures logging behaviour. */
export type LogOptions = {
    /** Logs informational message, such as which assets were downloaded and encoded;
     *  assign <code>null</code> to disable logging informational messages. */
    info: ((msg: string) => void) | null;
    /** Logs warning message, such as a non-fatal issue with encoding process;
     *  assign <code>null</code> to disable logging warning messages. */
    warn: ((msg: string) => void) | null;
    /** Logs error message associated with a failed procedure;
     *  assign <code>null</code> to disable logging error messages. */
    err: ((msg: string) => void) | null;
};

/** Configures server cache. */
export type CacheOptions = {
    /** Local directory where the build cache files are stored. When building static apps (SPA) on CI,
     *  consider checking-in the cache directory to boost remote build processes;
     *  <code>./node_modules/.cache/imgit</code> by default. */
    root: string;
    /** Persists specified cache instance for consequent runs; writes to file system by default.
     *  When running SSR under constraint environments (eg, on edge), override to use alternative APIs. */
    save: (cache: Cache) => Promise<void>;
    /** Loads cache instance of a previous run; reads from file system by default.
     *  When running SSR under constraint environments (eg, on edge), override to use alternative APIs. */
    load: () => Promise<Cache>;
}

/** Configures remote assets downloading behaviour. */
export type FetchOptions = {
    /** Local directory to store downloaded remote content files;
     *  <code>./node_modules/.cache/imgit/fetched</code> by default. */
    root: string;
    /** How long to wait when downloading remote asset, in seconds; 30 by default. */
    timeout: number;
    /** How many times to restart the download when request fails; 3 by default. */
    retries: number;
    /** How long to wait before restarting a failed download, in seconds; 6 by default.*/
    delay: number;
};

/** Configures assets encoding. */
export type EncodeOptions = {
    /** Local directory to store encoded content files and generated posters;
     *  <code>./node_modules/.cache/imgit/encoded</code> by default. */
    root: string;
    /** Implementation to probe and encode media files with; specify to swap ffmpeg used by default. */
    encoder: Encoder;
    /** Encode parameters mapped by content MIME type. */
    specs: [string | RegExp, EncodeSpec][];
    /** Configure poster generation; specify <code>null</code> to disable per-asset poster generation. */
    poster: EncodeSpec & {
        /** Tag to append to the names of generated poster files; <code>-poster</code> by default. */
        suffix: string;
    } | null;
    /** Tag to append to the names of encoded files; <code>-imgit</code> by default. */
    suffix: string;
};

/** Configures document transformation process. */
export type TransformOptions = {
    /** 1st phase: finds assets to transform in the document with specified content. */
    capture: (content: string) => Promise<CapturedAsset[]>;
    /** 2nd phase: resolves type, content locations and specs of the captured syntax. */
    resolve: (assets: CapturedAsset[]) => Promise<ResolvedAsset[]>;
    /** 3rd phase: downloads file content for the resolved assets. */
    fetch: (assets: ResolvedAsset[]) => Promise<FetchedAsset[]>;
    /** 4th phase: probes downloaded asset files to evaluate their content properties. */
    probe: (assets: FetchedAsset[]) => Promise<ProbedAsset[]>;
    /** 5th phase: creates optimized versions of the source content files. */
    encode: (assets: ProbedAsset[]) => Promise<EncodedAsset[]>;
    /** 6th phase: builds HTML for the optimized asset content. */
    build: (assets: EncodedAsset[]) => Promise<BuiltAsset[]>;
    /** 7th phase: replaces captured syntax with the built HTML; returns modified document content. */
    rewrite: (content: string, assets: BuiltAsset[]) => Promise<string>;
};
